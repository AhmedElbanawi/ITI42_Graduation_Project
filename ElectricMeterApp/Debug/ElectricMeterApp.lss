
ElectricMeterApp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000430  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000048  00800060  00000430  000004c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  008000a8  008000a8  0000050c  2**0
                  ALLOC
  3 .stab         0000162c  00000000  00000000  0000050c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fb4  00000000  00000000  00001b38  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 8a 01 	jmp	0x314	; 0x314 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 b3 01 	jmp	0x366	; 0x366 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e3       	ldi	r30, 0x30	; 48
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 3a       	cpi	r26, 0xA8	; 168
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 ea       	ldi	r26, 0xA8	; 168
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 3a       	cpi	r26, 0xAA	; 170
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 de 01 	call	0x3bc	; 0x3bc <main>
  8a:	0c 94 16 02 	jmp	0x42c	; 0x42c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_WRITE_PIN_VALUE>:
			break;
		}
	}
}
/****************************************************************************/
void DIO_WRITE_PIN_VALUE(const DIO_PIN_ID_t PIN_ID, const DIO_PIN_STATE_t PIN_STATE){
  92:	38 2f       	mov	r19, r24
	volatile UINT8_t* const Reg[DIO_MAX_PORTS] = { PORTA_ADD, PORTB_ADD, PORTC_ADD, PORTD_ADD };
	DIO_PORT_ID_t Port_Id = PIN_ID / 8;
  94:	e8 2f       	mov	r30, r24
  96:	e6 95       	lsr	r30
  98:	e6 95       	lsr	r30
  9a:	e6 95       	lsr	r30
	switch (PIN_STATE) {
  9c:	66 23       	and	r22, r22
  9e:	b1 f0       	breq	.+44     	; 0xcc <DIO_WRITE_PIN_VALUE+0x3a>
  a0:	61 30       	cpi	r22, 0x01	; 1
  a2:	41 f5       	brne	.+80     	; 0xf4 <DIO_WRITE_PIN_VALUE+0x62>
	case DIO_PIN_STATE_HIGH:
		SET_BIT(*Reg[Port_Id], PIN_ID % 8);
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	ee 0f       	add	r30, r30
  a8:	ff 1f       	adc	r31, r31
  aa:	e8 56       	subi	r30, 0x68	; 104
  ac:	ff 4f       	sbci	r31, 0xFF	; 255
  ae:	01 90       	ld	r0, Z+
  b0:	f0 81       	ld	r31, Z
  b2:	e0 2d       	mov	r30, r0
  b4:	20 81       	ld	r18, Z
  b6:	37 70       	andi	r19, 0x07	; 7
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <DIO_WRITE_PIN_VALUE+0x30>
  be:	88 0f       	add	r24, r24
  c0:	99 1f       	adc	r25, r25
  c2:	3a 95       	dec	r19
  c4:	e2 f7       	brpl	.-8      	; 0xbe <DIO_WRITE_PIN_VALUE+0x2c>
  c6:	28 2b       	or	r18, r24
  c8:	20 83       	st	Z, r18
  ca:	08 95       	ret
		break;
	case DIO_PIN_STATE_LOW:
		CLEAR_BIT(*Reg[Port_Id], PIN_ID % 8);
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	ee 0f       	add	r30, r30
  d0:	ff 1f       	adc	r31, r31
  d2:	e8 56       	subi	r30, 0x68	; 104
  d4:	ff 4f       	sbci	r31, 0xFF	; 255
  d6:	01 90       	ld	r0, Z+
  d8:	f0 81       	ld	r31, Z
  da:	e0 2d       	mov	r30, r0
  dc:	20 81       	ld	r18, Z
  de:	37 70       	andi	r19, 0x07	; 7
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	02 c0       	rjmp	.+4      	; 0xea <DIO_WRITE_PIN_VALUE+0x58>
  e6:	88 0f       	add	r24, r24
  e8:	99 1f       	adc	r25, r25
  ea:	3a 95       	dec	r19
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <DIO_WRITE_PIN_VALUE+0x54>
  ee:	80 95       	com	r24
  f0:	82 23       	and	r24, r18
  f2:	80 83       	st	Z, r24
  f4:	08 95       	ret

000000f6 <DIO_INIT>:
#include "DIO_CFG.h"
#include "DIO.h"
/****************************************************************************/

void DIO_INIT(void)
{
  f6:	ef 92       	push	r14
  f8:	ff 92       	push	r15
  fa:	1f 93       	push	r17
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
 100:	10 e0       	ldi	r17, 0x00	; 0
 102:	c0 e0       	ldi	r28, 0x00	; 0
 104:	d0 e0       	ldi	r29, 0x00	; 0
	volatile UINT8_t* const Reg[DIO_MAX_PORTS] = { DDRA_ADD, DDRB_ADD, DDRC_ADD, DDRD_ADD };
	for (Pin_Id = DIO_PINA0; Pin_Id < DIO_MAX_PINS; Pin_Id++) {
		Port_Id = Pin_Id / 8;
		switch (Pin_Direction[Pin_Id]) {
		case DIO_PIN_DIRECTION_OUTPUT:
			SET_BIT(*Reg[Port_Id], Pin_Id % 8);
 106:	51 e0       	ldi	r21, 0x01	; 1
 108:	e5 2e       	mov	r14, r21
 10a:	f1 2c       	mov	r15, r1
{
	DIO_PIN_ID_t Pin_Id;
	DIO_PORT_ID_t Port_Id;
	volatile UINT8_t* const Reg[DIO_MAX_PORTS] = { DDRA_ADD, DDRB_ADD, DDRC_ADD, DDRD_ADD };
	for (Pin_Id = DIO_PINA0; Pin_Id < DIO_MAX_PINS; Pin_Id++) {
		Port_Id = Pin_Id / 8;
 10c:	21 2f       	mov	r18, r17
 10e:	26 95       	lsr	r18
 110:	26 95       	lsr	r18
 112:	26 95       	lsr	r18
		switch (Pin_Direction[Pin_Id]) {
 114:	81 2f       	mov	r24, r17
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	fc 01       	movw	r30, r24
 11a:	e0 5a       	subi	r30, 0xA0	; 160
 11c:	ff 4f       	sbci	r31, 0xFF	; 255
 11e:	e0 81       	ld	r30, Z
 120:	e1 30       	cpi	r30, 0x01	; 1
 122:	31 f0       	breq	.+12     	; 0x130 <DIO_INIT+0x3a>
 124:	e1 30       	cpi	r30, 0x01	; 1
 126:	c8 f0       	brcs	.+50     	; 0x15a <DIO_INIT+0x64>
 128:	e2 30       	cpi	r30, 0x02	; 2
 12a:	09 f0       	breq	.+2      	; 0x12e <DIO_INIT+0x38>
 12c:	49 c0       	rjmp	.+146    	; 0x1c0 <DIO_INIT+0xca>
 12e:	2e c0       	rjmp	.+92     	; 0x18c <DIO_INIT+0x96>
		case DIO_PIN_DIRECTION_OUTPUT:
			SET_BIT(*Reg[Port_Id], Pin_Id % 8);
 130:	e2 2f       	mov	r30, r18
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	ee 0f       	add	r30, r30
 136:	ff 1f       	adc	r31, r31
 138:	e0 56       	subi	r30, 0x60	; 96
 13a:	ff 4f       	sbci	r31, 0xFF	; 255
 13c:	01 90       	ld	r0, Z+
 13e:	f0 81       	ld	r31, Z
 140:	e0 2d       	mov	r30, r0
 142:	20 81       	ld	r18, Z
 144:	87 70       	andi	r24, 0x07	; 7
 146:	90 70       	andi	r25, 0x00	; 0
 148:	a7 01       	movw	r20, r14
 14a:	02 c0       	rjmp	.+4      	; 0x150 <DIO_INIT+0x5a>
 14c:	44 0f       	add	r20, r20
 14e:	55 1f       	adc	r21, r21
 150:	8a 95       	dec	r24
 152:	e2 f7       	brpl	.-8      	; 0x14c <DIO_INIT+0x56>
 154:	24 2b       	or	r18, r20
 156:	20 83       	st	Z, r18
 158:	33 c0       	rjmp	.+102    	; 0x1c0 <DIO_INIT+0xca>
			break;
		case DIO_PIN_DIRECTION_INPUT_PULL_UP:
			CLEAR_BIT(*Reg[Port_Id], Pin_Id % 8);
 15a:	e2 2f       	mov	r30, r18
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	ee 0f       	add	r30, r30
 160:	ff 1f       	adc	r31, r31
 162:	e0 56       	subi	r30, 0x60	; 96
 164:	ff 4f       	sbci	r31, 0xFF	; 255
 166:	01 90       	ld	r0, Z+
 168:	f0 81       	ld	r31, Z
 16a:	e0 2d       	mov	r30, r0
 16c:	20 81       	ld	r18, Z
 16e:	87 70       	andi	r24, 0x07	; 7
 170:	90 70       	andi	r25, 0x00	; 0
 172:	a7 01       	movw	r20, r14
 174:	02 c0       	rjmp	.+4      	; 0x17a <DIO_INIT+0x84>
 176:	44 0f       	add	r20, r20
 178:	55 1f       	adc	r21, r21
 17a:	8a 95       	dec	r24
 17c:	e2 f7       	brpl	.-8      	; 0x176 <DIO_INIT+0x80>
 17e:	ca 01       	movw	r24, r20
 180:	80 95       	com	r24
 182:	82 23       	and	r24, r18
 184:	80 83       	st	Z, r24
			DIO_WRITE_PIN_VALUE(Pin_Id, DIO_PIN_STATE_HIGH);
 186:	81 2f       	mov	r24, r17
 188:	61 e0       	ldi	r22, 0x01	; 1
 18a:	18 c0       	rjmp	.+48     	; 0x1bc <DIO_INIT+0xc6>
			break;
		case DIO_PIN_DIRECTION_INPUT_FLOAT:
			CLEAR_BIT(*Reg[Port_Id], Pin_Id % 8);
 18c:	e2 2f       	mov	r30, r18
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	ee 0f       	add	r30, r30
 192:	ff 1f       	adc	r31, r31
 194:	e0 56       	subi	r30, 0x60	; 96
 196:	ff 4f       	sbci	r31, 0xFF	; 255
 198:	01 90       	ld	r0, Z+
 19a:	f0 81       	ld	r31, Z
 19c:	e0 2d       	mov	r30, r0
 19e:	20 81       	ld	r18, Z
 1a0:	87 70       	andi	r24, 0x07	; 7
 1a2:	90 70       	andi	r25, 0x00	; 0
 1a4:	a7 01       	movw	r20, r14
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <DIO_INIT+0xb6>
 1a8:	44 0f       	add	r20, r20
 1aa:	55 1f       	adc	r21, r21
 1ac:	8a 95       	dec	r24
 1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <DIO_INIT+0xb2>
 1b0:	ca 01       	movw	r24, r20
 1b2:	80 95       	com	r24
 1b4:	82 23       	and	r24, r18
 1b6:	80 83       	st	Z, r24
			DIO_WRITE_PIN_VALUE(Pin_Id, DIO_PIN_STATE_LOW);
 1b8:	81 2f       	mov	r24, r17
 1ba:	60 e0       	ldi	r22, 0x00	; 0
 1bc:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WRITE_PIN_VALUE>
void DIO_INIT(void)
{
	DIO_PIN_ID_t Pin_Id;
	DIO_PORT_ID_t Port_Id;
	volatile UINT8_t* const Reg[DIO_MAX_PORTS] = { DDRA_ADD, DDRB_ADD, DDRC_ADD, DDRD_ADD };
	for (Pin_Id = DIO_PINA0; Pin_Id < DIO_MAX_PINS; Pin_Id++) {
 1c0:	1f 5f       	subi	r17, 0xFF	; 255
 1c2:	21 96       	adiw	r28, 0x01	; 1
 1c4:	c0 32       	cpi	r28, 0x20	; 32
 1c6:	d1 05       	cpc	r29, r1
 1c8:	09 f0       	breq	.+2      	; 0x1cc <DIO_INIT+0xd6>
 1ca:	a0 cf       	rjmp	.-192    	; 0x10c <DIO_INIT+0x16>
		break;
		default:
			break;
		}
	}
}
 1cc:	df 91       	pop	r29
 1ce:	cf 91       	pop	r28
 1d0:	1f 91       	pop	r17
 1d2:	ff 90       	pop	r15
 1d4:	ef 90       	pop	r14
 1d6:	08 95       	ret

000001d8 <DIO_READ_PIN_VALUE>:
	default:
		break;
	}
}
/****************************************************************************/
DIO_PIN_STATE_t DIO_READ_PIN_VALUE(const DIO_PIN_ID_t PIN_ID){
 1d8:	28 2f       	mov	r18, r24
	volatile UINT8_t* const Reg[DIO_MAX_PORTS] = { PINA_ADD, PINB_ADD, PINC_ADD, PIND_ADD };
	DIO_PORT_ID_t Port_Id = PIN_ID / 8;
	DIO_PIN_STATE_t State = DIO_PIN_STATE_LOW;
	if(DIO_PIN_STATE_HIGH == GET_BIT(*Reg[Port_Id], PIN_ID % 8)){
 1da:	e8 2f       	mov	r30, r24
 1dc:	e6 95       	lsr	r30
 1de:	e6 95       	lsr	r30
 1e0:	e6 95       	lsr	r30
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	ee 0f       	add	r30, r30
 1e6:	ff 1f       	adc	r31, r31
 1e8:	e0 57       	subi	r30, 0x70	; 112
 1ea:	ff 4f       	sbci	r31, 0xFF	; 255
 1ec:	01 90       	ld	r0, Z+
 1ee:	f0 81       	ld	r31, Z
 1f0:	e0 2d       	mov	r30, r0
 1f2:	80 81       	ld	r24, Z
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	27 70       	andi	r18, 0x07	; 7
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <DIO_READ_PIN_VALUE+0x26>
 1fa:	95 95       	asr	r25
 1fc:	87 95       	ror	r24
 1fe:	2a 95       	dec	r18
 200:	e2 f7       	brpl	.-8      	; 0x1fa <DIO_READ_PIN_VALUE+0x22>
		State = DIO_PIN_STATE_HIGH;
	}
	return State;
}
 202:	81 70       	andi	r24, 0x01	; 1
 204:	08 95       	ret

00000206 <DIO_WRITE_PORT>:
/****************************************************************************/
void DIO_WRITE_PORT(const DIO_PORT_ID_t PORT_ID, const UINT8_t VALUE){
	volatile UINT8_t* const Reg[DIO_MAX_PORTS] = { PORTA_ADD, PORTB_ADD, PORTC_ADD, PORTD_ADD };
	*Reg[PORT_ID] = VALUE;
 206:	e8 2f       	mov	r30, r24
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	ee 0f       	add	r30, r30
 20c:	ff 1f       	adc	r31, r31
 20e:	e8 57       	subi	r30, 0x78	; 120
 210:	ff 4f       	sbci	r31, 0xFF	; 255
 212:	01 90       	ld	r0, Z+
 214:	f0 81       	ld	r31, Z
 216:	e0 2d       	mov	r30, r0
 218:	60 83       	st	Z, r22
}
 21a:	08 95       	ret

0000021c <DIO_Read_PORT>:
/****************************************************************************/
UINT8_t DIO_Read_PORT(const DIO_PORT_ID_t PORT_ID){
	volatile UINT8_t* const Reg[DIO_MAX_PORTS] = { PINA_ADD, PINB_ADD, PINC_ADD, PIND_ADD };
	return *Reg[PORT_ID];
 21c:	e8 2f       	mov	r30, r24
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	ee 0f       	add	r30, r30
 222:	ff 1f       	adc	r31, r31
 224:	e0 58       	subi	r30, 0x80	; 128
 226:	ff 4f       	sbci	r31, 0xFF	; 255
 228:	01 90       	ld	r0, Z+
 22a:	f0 81       	ld	r31, Z
 22c:	e0 2d       	mov	r30, r0
 22e:	80 81       	ld	r24, Z
}
 230:	08 95       	ret

00000232 <FLASH_Data_Write>:
#include "FLASH_DATA.h"
void
FLASH_Data_Write(UINT16_t Address, UINT8_t Data)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEMWE))
 232:	e2 99       	sbic	0x1c, 2	; 28
 234:	fe cf       	rjmp	.-4      	; 0x232 <FLASH_Data_Write>
	;
	/* Set up address and data registers */
	EEAR = Address;
 236:	9f bb       	out	0x1f, r25	; 31
 238:	8e bb       	out	0x1e, r24	; 30
	EEDR = Data;
 23a:	6d bb       	out	0x1d, r22	; 29
	/* Write logical one to EEMWE */
	EECR |= (1<<EEMWE);
 23c:	e2 9a       	sbi	0x1c, 2	; 28
	/* Start eeprom write by setting EEWE */
	EECR |= (1<<EEWE);
 23e:	e1 9a       	sbi	0x1c, 1	; 28
}
 240:	08 95       	ret

00000242 <FLASH_Data_Read>:
UINT8_t
FLASH_Data_Read(UINT16_t Address)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEMWE))
 242:	e2 99       	sbic	0x1c, 2	; 28
 244:	fe cf       	rjmp	.-4      	; 0x242 <FLASH_Data_Read>
	;
	/* Set up address register */
	EEAR = Address;
 246:	9f bb       	out	0x1f, r25	; 31
 248:	8e bb       	out	0x1e, r24	; 30
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
 24a:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	return EEDR;
 24c:	8d b3       	in	r24, 0x1d	; 29
}
 24e:	08 95       	ret

00000250 <REQ_Init>:



void
REQ_Init(void){
	UART_ISR_PTR=REQ_Handler;
 250:	8f e2       	ldi	r24, 0x2F	; 47
 252:	91 e0       	ldi	r25, 0x01	; 1
 254:	90 93 a9 00 	sts	0x00A9, r25
 258:	80 93 a8 00 	sts	0x00A8, r24
}
 25c:	08 95       	ret

0000025e <REQ_Handler>:

void
REQ_Handler(void){
	UINT8_t Curr_Req;
	Curr_Req=URT_Rx_Byte();
 25e:	0e 94 79 01 	call	0x2f2	; 0x2f2 <URT_Rx_Byte>

	switch(Curr_Req){
 262:	80 33       	cpi	r24, 0x30	; 48
 264:	61 f4       	brne	.+24     	; 0x27e <REQ_Handler+0x20>

	case UDS_REQ_DATA_TRANSFER:
		GIC;
 266:	8f b7       	in	r24, 0x3f	; 63
 268:	8f 77       	andi	r24, 0x7F	; 127
 26a:	8f bf       	out	0x3f, r24	; 63
		UDS_Write_Request(UDS_REQ_DATA_TRANSFER);
 26c:	80 e3       	ldi	r24, 0x30	; 48
 26e:	0e 94 54 01 	call	0x2a8	; 0x2a8 <UDS_Write_Request>
		WDT_Priode(WDT_16_MS);
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	0e 94 c1 01 	call	0x382	; 0x382 <WDT_Priode>
		WDT_Enable();
 278:	0e 94 bd 01 	call	0x37a	; 0x37a <WDT_Enable>
 27c:	ff cf       	rjmp	.-2      	; 0x27c <REQ_Handler+0x1e>
 27e:	08 95       	ret

00000280 <UDS_Read_Request>:

	UDS_t Request = UDS_NO_REQ;

	UINT8_t Reading;

	Reading = FLASH_Data_Read(UDS_REQ_ADDRESS);
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	0e 94 21 01 	call	0x242	; 0x242 <FLASH_Data_Read>
 288:	20 e1       	ldi	r18, 0x10	; 16
 28a:	37 e2       	ldi	r19, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 28c:	48 ec       	ldi	r20, 0xC8	; 200
 28e:	50 e0       	ldi	r21, 0x00	; 0
 290:	fa 01       	movw	r30, r20
 292:	31 97       	sbiw	r30, 0x01	; 1
 294:	f1 f7       	brne	.-4      	; 0x292 <UDS_Read_Request+0x12>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 296:	21 50       	subi	r18, 0x01	; 1
 298:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 29a:	d1 f7       	brne	.-12     	; 0x290 <UDS_Read_Request+0x10>

	_delay_ms(1000);

	switch (Reading) {
 29c:	80 33       	cpi	r24, 0x30	; 48
 29e:	11 f4       	brne	.+4      	; 0x2a4 <UDS_Read_Request+0x24>
 2a0:	80 e3       	ldi	r24, 0x30	; 48
 2a2:	08 95       	ret
 2a4:	88 ef       	ldi	r24, 0xF8	; 248
	default:

		break;
	}
	return Request;
}
 2a6:	08 95       	ret

000002a8 <UDS_Write_Request>:
#define UDS_REQ_ADDRESS 0x01

void
UDS_Write_Request(UDS_t Request){

	switch(Request){
 2a8:	80 33       	cpi	r24, 0x30	; 48
 2aa:	31 f0       	breq	.+12     	; 0x2b8 <UDS_Write_Request+0x10>
 2ac:	88 3f       	cpi	r24, 0xF8	; 248
 2ae:	49 f4       	brne	.+18     	; 0x2c2 <UDS_Write_Request+0x1a>

	case UDS_NO_REQ:
		FLASH_Data_Write(UDS_REQ_ADDRESS, UDS_NO_REQ);
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	68 ef       	ldi	r22, 0xF8	; 248
 2b6:	03 c0       	rjmp	.+6      	; 0x2be <UDS_Write_Request+0x16>
		break;

	case UDS_REQ_DATA_TRANSFER:
		FLASH_Data_Write(UDS_REQ_ADDRESS, UDS_REQ_DATA_TRANSFER);
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	60 e3       	ldi	r22, 0x30	; 48
 2be:	0e 94 19 01 	call	0x232	; 0x232 <FLASH_Data_Write>
 2c2:	80 e1       	ldi	r24, 0x10	; 16
 2c4:	97 e2       	ldi	r25, 0x27	; 39
 2c6:	28 ec       	ldi	r18, 0xC8	; 200
 2c8:	30 e0       	ldi	r19, 0x00	; 0
 2ca:	f9 01       	movw	r30, r18
 2cc:	31 97       	sbiw	r30, 0x01	; 1
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <UDS_Write_Request+0x24>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2d0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2d2:	d9 f7       	brne	.-10     	; 0x2ca <UDS_Write_Request+0x22>

	}

	_delay_ms(1000);

}
 2d4:	08 95       	ret

000002d6 <URT_Init>:
}
/****************************************************************************/
void
URT_Init(void)
{
	SET_BIT(UCSRC, 1);
 2d6:	80 b5       	in	r24, 0x20	; 32
 2d8:	82 60       	ori	r24, 0x02	; 2
 2da:	80 bd       	out	0x20, r24	; 32
	SET_BIT(UCSRC, 2);
 2dc:	80 b5       	in	r24, 0x20	; 32
 2de:	84 60       	ori	r24, 0x04	; 4
 2e0:	80 bd       	out	0x20, r24	; 32
	UBRRH = URT_BAUD_RATE >> 8;
 2e2:	10 bc       	out	0x20, r1	; 32
	UBRRL = URT_BAUD_RATE;
 2e4:	83 e3       	ldi	r24, 0x33	; 51
 2e6:	89 b9       	out	0x09, r24	; 9
static void
URT_Tx_INT(const URT_INT_t INT)
{
	switch (INT) {
	case URT_IE:
		SET_BIT(UCSRB, 6);
 2e8:	56 9a       	sbi	0x0a, 6	; 10
static void
URT_Tx(const URT_MODE_t MODE)
{
	switch (MODE) {
	case URT_ENABLE:
		SET_BIT(UCSRB, 3);
 2ea:	53 9a       	sbi	0x0a, 3	; 10
static void
URT_Rx_INT(const URT_INT_t INT)
{
	switch (INT) {
	case URT_IE:
		SET_BIT(UCSRB, 7);
 2ec:	57 9a       	sbi	0x0a, 7	; 10
static void
URT_Rx(const URT_MODE_t MODE)
{
	switch (MODE) {
	case URT_ENABLE:
		SET_BIT(UCSRB, 4);
 2ee:	54 9a       	sbi	0x0a, 4	; 10

	/*- init URT RX -*/
		URT_Rx_INT(URT_IE);
		URT_Rx(URT_ENABLE);

}
 2f0:	08 95       	ret

000002f2 <URT_Rx_Byte>:
/****************************************************************************/
UINT8_t
URT_Rx_Byte(void)
{
	return UDR;
 2f2:	8c b1       	in	r24, 0x0c	; 12
}
 2f4:	08 95       	ret

000002f6 <Str_Cmp>:
BOOL_t
Str_Cmp(const UINT8_t* Str1, const UINT8_t* Str2)
{
 2f6:	dc 01       	movw	r26, r24
 2f8:	fb 01       	movw	r30, r22
 2fa:	06 c0       	rjmp	.+12     	; 0x308 <Str_Cmp+0x12>
	BOOL_t IsSame = FALSE;
	while(*Str1 == *Str2){
		if(*Str1 == '\0'){
 2fc:	99 23       	and	r25, r25
 2fe:	11 f4       	brne	.+4      	; 0x304 <Str_Cmp+0xe>
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	08 95       	ret
			IsSame = TRUE;
			break;
		}
		++Str1;
 304:	11 96       	adiw	r26, 0x01	; 1
		++Str2;
 306:	31 96       	adiw	r30, 0x01	; 1
}
BOOL_t
Str_Cmp(const UINT8_t* Str1, const UINT8_t* Str2)
{
	BOOL_t IsSame = FALSE;
	while(*Str1 == *Str2){
 308:	9c 91       	ld	r25, X
 30a:	80 81       	ld	r24, Z
 30c:	98 17       	cp	r25, r24
 30e:	b1 f3       	breq	.-20     	; 0x2fc <Str_Cmp+0x6>
 310:	80 e0       	ldi	r24, 0x00	; 0
		}
		++Str1;
		++Str2;
	}
	return IsSame;
}
 312:	08 95       	ret

00000314 <__vector_13>:
/****************************************************************************/
ISR(URT_RX_OVF_VECT)
{
 314:	1f 92       	push	r1
 316:	0f 92       	push	r0
 318:	0f b6       	in	r0, 0x3f	; 63
 31a:	0f 92       	push	r0
 31c:	11 24       	eor	r1, r1
 31e:	2f 93       	push	r18
 320:	3f 93       	push	r19
 322:	4f 93       	push	r20
 324:	5f 93       	push	r21
 326:	6f 93       	push	r22
 328:	7f 93       	push	r23
 32a:	8f 93       	push	r24
 32c:	9f 93       	push	r25
 32e:	af 93       	push	r26
 330:	bf 93       	push	r27
 332:	ef 93       	push	r30
 334:	ff 93       	push	r31
	if(UART_ISR_PTR!=NULL_PTR)
 336:	e0 91 a8 00 	lds	r30, 0x00A8
 33a:	f0 91 a9 00 	lds	r31, 0x00A9
 33e:	30 97       	sbiw	r30, 0x00	; 0
 340:	09 f0       	breq	.+2      	; 0x344 <__vector_13+0x30>
	{
		UART_ISR_PTR();
 342:	09 95       	icall
	}
}
 344:	ff 91       	pop	r31
 346:	ef 91       	pop	r30
 348:	bf 91       	pop	r27
 34a:	af 91       	pop	r26
 34c:	9f 91       	pop	r25
 34e:	8f 91       	pop	r24
 350:	7f 91       	pop	r23
 352:	6f 91       	pop	r22
 354:	5f 91       	pop	r21
 356:	4f 91       	pop	r20
 358:	3f 91       	pop	r19
 35a:	2f 91       	pop	r18
 35c:	0f 90       	pop	r0
 35e:	0f be       	out	0x3f, r0	; 63
 360:	0f 90       	pop	r0
 362:	1f 90       	pop	r1
 364:	18 95       	reti

00000366 <__vector_15>:
/****************************************************************************/
ISR(URT_TX_OVF_VECT)
{
 366:	1f 92       	push	r1
 368:	0f 92       	push	r0
 36a:	0f b6       	in	r0, 0x3f	; 63
 36c:	0f 92       	push	r0
 36e:	11 24       	eor	r1, r1

}
 370:	0f 90       	pop	r0
 372:	0f be       	out	0x3f, r0	; 63
 374:	0f 90       	pop	r0
 376:	1f 90       	pop	r1
 378:	18 95       	reti

0000037a <WDT_Enable>:
#include "STD_MEMORY_MAP.h"
#include "STD_BITS.h"
#include "WDT.h"

void WDT_Enable(void){
	SET_BIT(WDTCR, 3);
 37a:	81 b5       	in	r24, 0x21	; 33
 37c:	88 60       	ori	r24, 0x08	; 8
 37e:	81 bd       	out	0x21, r24	; 33
}
 380:	08 95       	ret

00000382 <WDT_Priode>:
void WDT_Priode(const WDT_PERIODE_t PERIODE){
	WDTCR &= 0XF8;
 382:	91 b5       	in	r25, 0x21	; 33
 384:	98 7f       	andi	r25, 0xF8	; 248
 386:	91 bd       	out	0x21, r25	; 33
	WDTCR |= PERIODE;
 388:	91 b5       	in	r25, 0x21	; 33
 38a:	98 2b       	or	r25, r24
 38c:	91 bd       	out	0x21, r25	; 33
}
 38e:	08 95       	ret

00000390 <WDT_Refresh>:
void WDT_Refresh(void){
	asm volatile("wdr");
 390:	a8 95       	wdr
}
 392:	08 95       	ret

00000394 <WDT_Disable>:
void WDT_Disable(void){
	SET_BIT(WDTCR, 3);
 394:	81 b5       	in	r24, 0x21	; 33
 396:	88 60       	ori	r24, 0x08	; 8
 398:	81 bd       	out	0x21, r24	; 33
	SET_BIT(WDTCR, 4);
 39a:	81 b5       	in	r24, 0x21	; 33
 39c:	80 61       	ori	r24, 0x10	; 16
 39e:	81 bd       	out	0x21, r24	; 33
	CLEAR_BIT(WDTCR, 3);
 3a0:	81 b5       	in	r24, 0x21	; 33
 3a2:	87 7f       	andi	r24, 0xF7	; 247
 3a4:	81 bd       	out	0x21, r24	; 33
}
 3a6:	08 95       	ret

000003a8 <WDT_Qinit>:

void WDT_Enable(void){
	SET_BIT(WDTCR, 3);
}
void WDT_Priode(const WDT_PERIODE_t PERIODE){
	WDTCR &= 0XF8;
 3a8:	81 b5       	in	r24, 0x21	; 33
 3aa:	88 7f       	andi	r24, 0xF8	; 248
 3ac:	81 bd       	out	0x21, r24	; 33
	WDTCR |= PERIODE;
 3ae:	81 b5       	in	r24, 0x21	; 33
 3b0:	86 60       	ori	r24, 0x06	; 6
 3b2:	81 bd       	out	0x21, r24	; 33
#include "STD_MEMORY_MAP.h"
#include "STD_BITS.h"
#include "WDT.h"

void WDT_Enable(void){
	SET_BIT(WDTCR, 3);
 3b4:	81 b5       	in	r24, 0x21	; 33
 3b6:	88 60       	ori	r24, 0x08	; 8
 3b8:	81 bd       	out	0x21, r24	; 33
}
void WDT_Qinit(void)
{
	WDT_Priode(WDT_1000_MS);
	WDT_Enable();
}
 3ba:	08 95       	ret

000003bc <main>:
#include "DIO.h"
#include "URT.h"
#include "util/delay.h"
#include "REQ.h"
int
main(void){
 3bc:	1f 93       	push	r17
 3be:	cf 93       	push	r28
 3c0:	df 93       	push	r29

	GIE;
 3c2:	8f b7       	in	r24, 0x3f	; 63
 3c4:	80 68       	ori	r24, 0x80	; 128
 3c6:	8f bf       	out	0x3f, r24	; 63
	DIO_INIT();
 3c8:	0e 94 7b 00 	call	0xf6	; 0xf6 <DIO_INIT>
	URT_Init();
 3cc:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <URT_Init>
	REQ_Init();
 3d0:	0e 94 28 01 	call	0x250	; 0x250 <REQ_Init>
	DIO_WRITE_PIN_VALUE(DIO_PINC1, DIO_PIN_STATE_LOW);
 3d4:	81 e1       	ldi	r24, 0x11	; 17
 3d6:	60 e0       	ldi	r22, 0x00	; 0
 3d8:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WRITE_PIN_VALUE>
	DIO_WRITE_PIN_VALUE(DIO_PINC0, DIO_PIN_STATE_LOW);
 3dc:	80 e1       	ldi	r24, 0x10	; 16
 3de:	60 e0       	ldi	r22, 0x00	; 0
 3e0:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WRITE_PIN_VALUE>
 3e4:	80 e3       	ldi	r24, 0x30	; 48
 3e6:	95 e7       	ldi	r25, 0x75	; 117
 3e8:	28 ec       	ldi	r18, 0xC8	; 200
 3ea:	30 e0       	ldi	r19, 0x00	; 0
 3ec:	f9 01       	movw	r30, r18
 3ee:	31 97       	sbiw	r30, 0x01	; 1
 3f0:	f1 f7       	brne	.-4      	; 0x3ee <main+0x32>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3f2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3f4:	d9 f7       	brne	.-10     	; 0x3ec <main+0x30>
	_delay_ms(3000);
	while(1){
		DIO_WRITE_PIN_VALUE(DIO_PINC1, 1^DIO_READ_PIN_VALUE(DIO_PINC1));
 3f6:	11 e0       	ldi	r17, 0x01	; 1
 3f8:	c8 ec       	ldi	r28, 0xC8	; 200
 3fa:	d0 e0       	ldi	r29, 0x00	; 0
 3fc:	81 e1       	ldi	r24, 0x11	; 17
 3fe:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_READ_PIN_VALUE>
 402:	68 2f       	mov	r22, r24
 404:	61 27       	eor	r22, r17
 406:	81 e1       	ldi	r24, 0x11	; 17
 408:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WRITE_PIN_VALUE>
		DIO_WRITE_PIN_VALUE(DIO_PINC0, 1^DIO_READ_PIN_VALUE(DIO_PINC0));
 40c:	80 e1       	ldi	r24, 0x10	; 16
 40e:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_READ_PIN_VALUE>
 412:	68 2f       	mov	r22, r24
 414:	61 27       	eor	r22, r17
 416:	80 e1       	ldi	r24, 0x10	; 16
 418:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WRITE_PIN_VALUE>
 41c:	80 e1       	ldi	r24, 0x10	; 16
 41e:	97 e2       	ldi	r25, 0x27	; 39
 420:	fe 01       	movw	r30, r28
 422:	31 97       	sbiw	r30, 0x01	; 1
 424:	f1 f7       	brne	.-4      	; 0x422 <main+0x66>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 426:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 428:	d9 f7       	brne	.-10     	; 0x420 <main+0x64>
 42a:	e8 cf       	rjmp	.-48     	; 0x3fc <main+0x40>

0000042c <_exit>:
 42c:	f8 94       	cli

0000042e <__stop_program>:
 42e:	ff cf       	rjmp	.-2      	; 0x42e <__stop_program>
