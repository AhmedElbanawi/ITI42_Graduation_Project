
ElectricMeterAppVersion2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000818  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000048  00800060  00000818  000008ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  008000a8  008000a8  000008f4  2**0
                  ALLOC
  3 .stab         00001cec  00000000  00000000  000008f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000107c  00000000  00000000  000025e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000040  00000000  00000000  0000365c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000040  00000000  00000000  0000369c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000002fe  00000000  00000000  000036dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000001dc  00000000  00000000  000039da  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000001ae  00000000  00000000  00003bb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000040  00000000  00000000  00003d64  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000000f5  00000000  00000000  00003da4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000001f0  00000000  00000000  00003e99  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 77 03 	jmp	0x6ee	; 0x6ee <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 a0 03 	jmp	0x740	; 0x740 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e1       	ldi	r30, 0x18	; 24
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 3a       	cpi	r26, 0xA8	; 168
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 ea       	ldi	r26, 0xA8	; 168
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 3a       	cpi	r26, 0xAA	; 170
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 cb 03 	call	0x796	; 0x796 <main>
  8a:	0c 94 0a 04 	jmp	0x814	; 0x814 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__lshrdi3>:
  92:	ef 92       	push	r14
  94:	ff 92       	push	r15
  96:	0f 93       	push	r16
  98:	df 93       	push	r29
  9a:	cf 93       	push	r28
  9c:	cd b7       	in	r28, 0x3d	; 61
  9e:	de b7       	in	r29, 0x3e	; 62
  a0:	60 97       	sbiw	r28, 0x10	; 16
  a2:	0f b6       	in	r0, 0x3f	; 63
  a4:	f8 94       	cli
  a6:	de bf       	out	0x3e, r29	; 62
  a8:	0f be       	out	0x3f, r0	; 63
  aa:	cd bf       	out	0x3d, r28	; 61
  ac:	a8 2f       	mov	r26, r24
  ae:	00 23       	and	r16, r16
  b0:	09 f4       	brne	.+2      	; 0xb4 <__lshrdi3+0x22>
  b2:	61 c0       	rjmp	.+194    	; 0x176 <__lshrdi3+0xe4>
  b4:	7e 01       	movw	r14, r28
  b6:	08 94       	sec
  b8:	e1 1c       	adc	r14, r1
  ba:	f1 1c       	adc	r15, r1
  bc:	88 e0       	ldi	r24, 0x08	; 8
  be:	f7 01       	movw	r30, r14
  c0:	11 92       	st	Z+, r1
  c2:	8a 95       	dec	r24
  c4:	e9 f7       	brne	.-6      	; 0xc0 <__lshrdi3+0x2e>
  c6:	29 83       	std	Y+1, r18	; 0x01
  c8:	3a 83       	std	Y+2, r19	; 0x02
  ca:	4b 83       	std	Y+3, r20	; 0x03
  cc:	5c 83       	std	Y+4, r21	; 0x04
  ce:	6d 83       	std	Y+5, r22	; 0x05
  d0:	7e 83       	std	Y+6, r23	; 0x06
  d2:	af 83       	std	Y+7, r26	; 0x07
  d4:	98 87       	std	Y+8, r25	; 0x08
  d6:	80 e2       	ldi	r24, 0x20	; 32
  d8:	80 1b       	sub	r24, r16
  da:	e8 2f       	mov	r30, r24
  dc:	ff 27       	eor	r31, r31
  de:	e7 fd       	sbrc	r30, 7
  e0:	f0 95       	com	r31
  e2:	4d 81       	ldd	r20, Y+5	; 0x05
  e4:	5e 81       	ldd	r21, Y+6	; 0x06
  e6:	6f 81       	ldd	r22, Y+7	; 0x07
  e8:	78 85       	ldd	r23, Y+8	; 0x08
  ea:	18 16       	cp	r1, r24
  ec:	84 f0       	brlt	.+32     	; 0x10e <__lshrdi3+0x7c>
  ee:	1d 86       	std	Y+13, r1	; 0x0d
  f0:	1e 86       	std	Y+14, r1	; 0x0e
  f2:	1f 86       	std	Y+15, r1	; 0x0f
  f4:	18 8a       	std	Y+16, r1	; 0x10
  f6:	88 27       	eor	r24, r24
  f8:	99 27       	eor	r25, r25
  fa:	8e 1b       	sub	r24, r30
  fc:	9f 0b       	sbc	r25, r31
  fe:	04 c0       	rjmp	.+8      	; 0x108 <__lshrdi3+0x76>
 100:	76 95       	lsr	r23
 102:	67 95       	ror	r22
 104:	57 95       	ror	r21
 106:	47 95       	ror	r20
 108:	8a 95       	dec	r24
 10a:	d2 f7       	brpl	.-12     	; 0x100 <__lshrdi3+0x6e>
 10c:	28 c0       	rjmp	.+80     	; 0x15e <__lshrdi3+0xcc>
 10e:	20 2f       	mov	r18, r16
 110:	33 27       	eor	r19, r19
 112:	27 fd       	sbrc	r18, 7
 114:	30 95       	com	r19
 116:	db 01       	movw	r26, r22
 118:	ca 01       	movw	r24, r20
 11a:	02 2e       	mov	r0, r18
 11c:	04 c0       	rjmp	.+8      	; 0x126 <__lshrdi3+0x94>
 11e:	b6 95       	lsr	r27
 120:	a7 95       	ror	r26
 122:	97 95       	ror	r25
 124:	87 95       	ror	r24
 126:	0a 94       	dec	r0
 128:	d2 f7       	brpl	.-12     	; 0x11e <__lshrdi3+0x8c>
 12a:	8d 87       	std	Y+13, r24	; 0x0d
 12c:	9e 87       	std	Y+14, r25	; 0x0e
 12e:	af 87       	std	Y+15, r26	; 0x0f
 130:	b8 8b       	std	Y+16, r27	; 0x10
 132:	04 c0       	rjmp	.+8      	; 0x13c <__lshrdi3+0xaa>
 134:	44 0f       	add	r20, r20
 136:	55 1f       	adc	r21, r21
 138:	66 1f       	adc	r22, r22
 13a:	77 1f       	adc	r23, r23
 13c:	ea 95       	dec	r30
 13e:	d2 f7       	brpl	.-12     	; 0x134 <__lshrdi3+0xa2>
 140:	89 81       	ldd	r24, Y+1	; 0x01
 142:	9a 81       	ldd	r25, Y+2	; 0x02
 144:	ab 81       	ldd	r26, Y+3	; 0x03
 146:	bc 81       	ldd	r27, Y+4	; 0x04
 148:	04 c0       	rjmp	.+8      	; 0x152 <__lshrdi3+0xc0>
 14a:	b6 95       	lsr	r27
 14c:	a7 95       	ror	r26
 14e:	97 95       	ror	r25
 150:	87 95       	ror	r24
 152:	2a 95       	dec	r18
 154:	d2 f7       	brpl	.-12     	; 0x14a <__lshrdi3+0xb8>
 156:	48 2b       	or	r20, r24
 158:	59 2b       	or	r21, r25
 15a:	6a 2b       	or	r22, r26
 15c:	7b 2b       	or	r23, r27
 15e:	49 87       	std	Y+9, r20	; 0x09
 160:	5a 87       	std	Y+10, r21	; 0x0a
 162:	6b 87       	std	Y+11, r22	; 0x0b
 164:	7c 87       	std	Y+12, r23	; 0x0c
 166:	29 85       	ldd	r18, Y+9	; 0x09
 168:	3a 85       	ldd	r19, Y+10	; 0x0a
 16a:	4b 85       	ldd	r20, Y+11	; 0x0b
 16c:	5c 85       	ldd	r21, Y+12	; 0x0c
 16e:	6d 85       	ldd	r22, Y+13	; 0x0d
 170:	7e 85       	ldd	r23, Y+14	; 0x0e
 172:	af 85       	ldd	r26, Y+15	; 0x0f
 174:	98 89       	ldd	r25, Y+16	; 0x10
 176:	8a 2f       	mov	r24, r26
 178:	60 96       	adiw	r28, 0x10	; 16
 17a:	0f b6       	in	r0, 0x3f	; 63
 17c:	f8 94       	cli
 17e:	de bf       	out	0x3e, r29	; 62
 180:	0f be       	out	0x3f, r0	; 63
 182:	cd bf       	out	0x3d, r28	; 61
 184:	cf 91       	pop	r28
 186:	df 91       	pop	r29
 188:	0f 91       	pop	r16
 18a:	ff 90       	pop	r15
 18c:	ef 90       	pop	r14
 18e:	08 95       	ret

00000190 <__ashldi3>:
 190:	ef 92       	push	r14
 192:	ff 92       	push	r15
 194:	0f 93       	push	r16
 196:	df 93       	push	r29
 198:	cf 93       	push	r28
 19a:	cd b7       	in	r28, 0x3d	; 61
 19c:	de b7       	in	r29, 0x3e	; 62
 19e:	60 97       	sbiw	r28, 0x10	; 16
 1a0:	0f b6       	in	r0, 0x3f	; 63
 1a2:	f8 94       	cli
 1a4:	de bf       	out	0x3e, r29	; 62
 1a6:	0f be       	out	0x3f, r0	; 63
 1a8:	cd bf       	out	0x3d, r28	; 61
 1aa:	a8 2f       	mov	r26, r24
 1ac:	00 23       	and	r16, r16
 1ae:	09 f4       	brne	.+2      	; 0x1b2 <__ashldi3+0x22>
 1b0:	61 c0       	rjmp	.+194    	; 0x274 <__ashldi3+0xe4>
 1b2:	7e 01       	movw	r14, r28
 1b4:	08 94       	sec
 1b6:	e1 1c       	adc	r14, r1
 1b8:	f1 1c       	adc	r15, r1
 1ba:	88 e0       	ldi	r24, 0x08	; 8
 1bc:	f7 01       	movw	r30, r14
 1be:	11 92       	st	Z+, r1
 1c0:	8a 95       	dec	r24
 1c2:	e9 f7       	brne	.-6      	; 0x1be <__ashldi3+0x2e>
 1c4:	29 83       	std	Y+1, r18	; 0x01
 1c6:	3a 83       	std	Y+2, r19	; 0x02
 1c8:	4b 83       	std	Y+3, r20	; 0x03
 1ca:	5c 83       	std	Y+4, r21	; 0x04
 1cc:	6d 83       	std	Y+5, r22	; 0x05
 1ce:	7e 83       	std	Y+6, r23	; 0x06
 1d0:	af 83       	std	Y+7, r26	; 0x07
 1d2:	98 87       	std	Y+8, r25	; 0x08
 1d4:	80 e2       	ldi	r24, 0x20	; 32
 1d6:	80 1b       	sub	r24, r16
 1d8:	e8 2f       	mov	r30, r24
 1da:	ff 27       	eor	r31, r31
 1dc:	e7 fd       	sbrc	r30, 7
 1de:	f0 95       	com	r31
 1e0:	49 81       	ldd	r20, Y+1	; 0x01
 1e2:	5a 81       	ldd	r21, Y+2	; 0x02
 1e4:	6b 81       	ldd	r22, Y+3	; 0x03
 1e6:	7c 81       	ldd	r23, Y+4	; 0x04
 1e8:	18 16       	cp	r1, r24
 1ea:	84 f0       	brlt	.+32     	; 0x20c <__ashldi3+0x7c>
 1ec:	19 86       	std	Y+9, r1	; 0x09
 1ee:	1a 86       	std	Y+10, r1	; 0x0a
 1f0:	1b 86       	std	Y+11, r1	; 0x0b
 1f2:	1c 86       	std	Y+12, r1	; 0x0c
 1f4:	88 27       	eor	r24, r24
 1f6:	99 27       	eor	r25, r25
 1f8:	8e 1b       	sub	r24, r30
 1fa:	9f 0b       	sbc	r25, r31
 1fc:	04 c0       	rjmp	.+8      	; 0x206 <__ashldi3+0x76>
 1fe:	44 0f       	add	r20, r20
 200:	55 1f       	adc	r21, r21
 202:	66 1f       	adc	r22, r22
 204:	77 1f       	adc	r23, r23
 206:	8a 95       	dec	r24
 208:	d2 f7       	brpl	.-12     	; 0x1fe <__ashldi3+0x6e>
 20a:	28 c0       	rjmp	.+80     	; 0x25c <__ashldi3+0xcc>
 20c:	20 2f       	mov	r18, r16
 20e:	33 27       	eor	r19, r19
 210:	27 fd       	sbrc	r18, 7
 212:	30 95       	com	r19
 214:	db 01       	movw	r26, r22
 216:	ca 01       	movw	r24, r20
 218:	02 2e       	mov	r0, r18
 21a:	04 c0       	rjmp	.+8      	; 0x224 <__ashldi3+0x94>
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	aa 1f       	adc	r26, r26
 222:	bb 1f       	adc	r27, r27
 224:	0a 94       	dec	r0
 226:	d2 f7       	brpl	.-12     	; 0x21c <__ashldi3+0x8c>
 228:	89 87       	std	Y+9, r24	; 0x09
 22a:	9a 87       	std	Y+10, r25	; 0x0a
 22c:	ab 87       	std	Y+11, r26	; 0x0b
 22e:	bc 87       	std	Y+12, r27	; 0x0c
 230:	04 c0       	rjmp	.+8      	; 0x23a <__ashldi3+0xaa>
 232:	76 95       	lsr	r23
 234:	67 95       	ror	r22
 236:	57 95       	ror	r21
 238:	47 95       	ror	r20
 23a:	ea 95       	dec	r30
 23c:	d2 f7       	brpl	.-12     	; 0x232 <__ashldi3+0xa2>
 23e:	8d 81       	ldd	r24, Y+5	; 0x05
 240:	9e 81       	ldd	r25, Y+6	; 0x06
 242:	af 81       	ldd	r26, Y+7	; 0x07
 244:	b8 85       	ldd	r27, Y+8	; 0x08
 246:	04 c0       	rjmp	.+8      	; 0x250 <__ashldi3+0xc0>
 248:	88 0f       	add	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	aa 1f       	adc	r26, r26
 24e:	bb 1f       	adc	r27, r27
 250:	2a 95       	dec	r18
 252:	d2 f7       	brpl	.-12     	; 0x248 <__ashldi3+0xb8>
 254:	48 2b       	or	r20, r24
 256:	59 2b       	or	r21, r25
 258:	6a 2b       	or	r22, r26
 25a:	7b 2b       	or	r23, r27
 25c:	4d 87       	std	Y+13, r20	; 0x0d
 25e:	5e 87       	std	Y+14, r21	; 0x0e
 260:	6f 87       	std	Y+15, r22	; 0x0f
 262:	78 8b       	std	Y+16, r23	; 0x10
 264:	29 85       	ldd	r18, Y+9	; 0x09
 266:	3a 85       	ldd	r19, Y+10	; 0x0a
 268:	4b 85       	ldd	r20, Y+11	; 0x0b
 26a:	5c 85       	ldd	r21, Y+12	; 0x0c
 26c:	6d 85       	ldd	r22, Y+13	; 0x0d
 26e:	7e 85       	ldd	r23, Y+14	; 0x0e
 270:	af 85       	ldd	r26, Y+15	; 0x0f
 272:	98 89       	ldd	r25, Y+16	; 0x10
 274:	8a 2f       	mov	r24, r26
 276:	60 96       	adiw	r28, 0x10	; 16
 278:	0f b6       	in	r0, 0x3f	; 63
 27a:	f8 94       	cli
 27c:	de bf       	out	0x3e, r29	; 62
 27e:	0f be       	out	0x3f, r0	; 63
 280:	cd bf       	out	0x3d, r28	; 61
 282:	cf 91       	pop	r28
 284:	df 91       	pop	r29
 286:	0f 91       	pop	r16
 288:	ff 90       	pop	r15
 28a:	ef 90       	pop	r14
 28c:	08 95       	ret

0000028e <Fees_Write>:

	UINT16_t Curr_Address = FEES_BASE_ADDRESS;

	for (Idx = 0; Idx < FEES_NO_OF_BYTES; ++Idx) {

		FLASH_Data_Write(Curr_Address, Fees);
 28e:	86 e4       	ldi	r24, 0x46	; 70
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	62 2f       	mov	r22, r18
 294:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <FLASH_Data_Write>
 298:	80 e1       	ldi	r24, 0x10	; 16
 29a:	97 e2       	ldi	r25, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 29c:	28 ec       	ldi	r18, 0xC8	; 200
 29e:	30 e0       	ldi	r19, 0x00	; 0
 2a0:	f9 01       	movw	r30, r18
 2a2:	31 97       	sbiw	r30, 0x01	; 1
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <Fees_Write+0x14>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2a6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2a8:	d9 f7       	brne	.-10     	; 0x2a0 <Fees_Write+0x12>

		++Curr_Address;

	}

}
 2aa:	08 95       	ret

000002ac <Balance_Write>:
	return Fees;

}

void
Balance_Write(UINT64_t Balance){
 2ac:	8f 92       	push	r8
 2ae:	9f 92       	push	r9
 2b0:	af 92       	push	r10
 2b2:	bf 92       	push	r11
 2b4:	cf 92       	push	r12
 2b6:	df 92       	push	r13
 2b8:	ef 92       	push	r14
 2ba:	ff 92       	push	r15
 2bc:	0f 93       	push	r16
 2be:	1f 93       	push	r17
 2c0:	cf 93       	push	r28
 2c2:	df 93       	push	r29
 2c4:	02 2f       	mov	r16, r18
 2c6:	a3 2e       	mov	r10, r19
 2c8:	b4 2e       	mov	r11, r20
 2ca:	c5 2e       	mov	r12, r21
 2cc:	d6 2e       	mov	r13, r22
 2ce:	e7 2e       	mov	r14, r23
 2d0:	f8 2e       	mov	r15, r24
 2d2:	19 2f       	mov	r17, r25
 2d4:	ca e5       	ldi	r28, 0x5A	; 90
 2d6:	d0 e0       	ldi	r29, 0x00	; 0
 2d8:	88 ec       	ldi	r24, 0xC8	; 200
 2da:	88 2e       	mov	r8, r24
 2dc:	91 2c       	mov	r9, r1

	UINT16_t Curr_Address = BALANCE_BASE_ADDRESS;

	for (Idx = 0; Idx < BALANCE_NO_OF_BYTES; ++Idx) {

		FLASH_Data_Write(Curr_Address, Balance);
 2de:	ce 01       	movw	r24, r28
 2e0:	60 2f       	mov	r22, r16
 2e2:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <FLASH_Data_Write>
 2e6:	80 e1       	ldi	r24, 0x10	; 16
 2e8:	97 e2       	ldi	r25, 0x27	; 39
 2ea:	f4 01       	movw	r30, r8
 2ec:	31 97       	sbiw	r30, 0x01	; 1
 2ee:	f1 f7       	brne	.-4      	; 0x2ec <Balance_Write+0x40>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2f0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2f2:	d9 f7       	brne	.-10     	; 0x2ea <Balance_Write+0x3e>

	UINT8_t Idx;

	UINT16_t Curr_Address = BALANCE_BASE_ADDRESS;

	for (Idx = 0; Idx < BALANCE_NO_OF_BYTES; ++Idx) {
 2f4:	c1 36       	cpi	r28, 0x61	; 97
 2f6:	d1 05       	cpc	r29, r1
 2f8:	a9 f0       	breq	.+42     	; 0x324 <Balance_Write+0x78>

		FLASH_Data_Write(Curr_Address, Balance);

		_delay_ms(1000);

		Balance >>=8;
 2fa:	20 2f       	mov	r18, r16
 2fc:	3a 2d       	mov	r19, r10
 2fe:	4b 2d       	mov	r20, r11
 300:	5c 2d       	mov	r21, r12
 302:	6d 2d       	mov	r22, r13
 304:	7e 2d       	mov	r23, r14
 306:	8f 2d       	mov	r24, r15
 308:	91 2f       	mov	r25, r17
 30a:	08 e0       	ldi	r16, 0x08	; 8
 30c:	0e 94 49 00 	call	0x92	; 0x92 <__lshrdi3>
 310:	02 2f       	mov	r16, r18
 312:	a3 2e       	mov	r10, r19
 314:	b4 2e       	mov	r11, r20
 316:	c5 2e       	mov	r12, r21
 318:	d6 2e       	mov	r13, r22
 31a:	e7 2e       	mov	r14, r23
 31c:	f8 2e       	mov	r15, r24
 31e:	19 2f       	mov	r17, r25

		++Curr_Address;
 320:	21 96       	adiw	r28, 0x01	; 1
 322:	dd cf       	rjmp	.-70     	; 0x2de <Balance_Write+0x32>

	}

}
 324:	df 91       	pop	r29
 326:	cf 91       	pop	r28
 328:	1f 91       	pop	r17
 32a:	0f 91       	pop	r16
 32c:	ff 90       	pop	r15
 32e:	ef 90       	pop	r14
 330:	df 90       	pop	r13
 332:	cf 90       	pop	r12
 334:	bf 90       	pop	r11
 336:	af 90       	pop	r10
 338:	9f 90       	pop	r9
 33a:	8f 90       	pop	r8
 33c:	08 95       	ret

0000033e <Fees_Read>:

	UINT64_t Fees = 0;

	for (Idx = 0; Idx < FEES_NO_OF_BYTES; ++Idx) {

		Data = (UINT64_t)FLASH_Data_Read(Curr_Address);
 33e:	86 e4       	ldi	r24, 0x46	; 70
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <FLASH_Data_Read>
 346:	28 2f       	mov	r18, r24
 348:	e0 e1       	ldi	r30, 0x10	; 16
 34a:	f7 e2       	ldi	r31, 0x27	; 39
 34c:	88 ec       	ldi	r24, 0xC8	; 200
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	dc 01       	movw	r26, r24
 352:	11 97       	sbiw	r26, 0x01	; 1
 354:	f1 f7       	brne	.-4      	; 0x352 <Fees_Read+0x14>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 356:	31 97       	sbiw	r30, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 358:	d9 f7       	brne	.-10     	; 0x350 <Fees_Read+0x12>

	}

	return Fees;

}
 35a:	30 e0       	ldi	r19, 0x00	; 0
 35c:	40 e0       	ldi	r20, 0x00	; 0
 35e:	50 e0       	ldi	r21, 0x00	; 0
 360:	60 e0       	ldi	r22, 0x00	; 0
 362:	70 e0       	ldi	r23, 0x00	; 0
 364:	80 e0       	ldi	r24, 0x00	; 0
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	08 95       	ret

0000036a <Balance_Read>:
#include "UDS.h"

#include "CFG_PAR.h"

UINT64_t
Balance_Read(void){
 36a:	4f 92       	push	r4
 36c:	5f 92       	push	r5
 36e:	7f 92       	push	r7
 370:	8f 92       	push	r8
 372:	9f 92       	push	r9
 374:	af 92       	push	r10
 376:	bf 92       	push	r11
 378:	cf 92       	push	r12
 37a:	df 92       	push	r13
 37c:	ef 92       	push	r14
 37e:	ff 92       	push	r15
 380:	0f 93       	push	r16
 382:	1f 93       	push	r17
 384:	cf 93       	push	r28
 386:	df 93       	push	r29
 388:	ca e5       	ldi	r28, 0x5A	; 90
 38a:	d0 e0       	ldi	r29, 0x00	; 0
 38c:	10 e0       	ldi	r17, 0x00	; 0
 38e:	dd 24       	eor	r13, r13
 390:	cc 24       	eor	r12, r12
 392:	bb 24       	eor	r11, r11
 394:	aa 24       	eor	r10, r10
 396:	99 24       	eor	r9, r9
 398:	88 24       	eor	r8, r8
 39a:	77 24       	eor	r7, r7
 39c:	ee 24       	eor	r14, r14
 39e:	ff 24       	eor	r15, r15
 3a0:	98 ec       	ldi	r25, 0xC8	; 200
 3a2:	49 2e       	mov	r4, r25
 3a4:	51 2c       	mov	r5, r1

	UINT64_t Balance = 0;

	for (Idx = 0; Idx < BALANCE_NO_OF_BYTES; ++Idx) {

		Data = (UINT64_t)FLASH_Data_Read(Curr_Address);
 3a6:	ce 01       	movw	r24, r28
 3a8:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <FLASH_Data_Read>
 3ac:	e0 e1       	ldi	r30, 0x10	; 16
 3ae:	f7 e2       	ldi	r31, 0x27	; 39
 3b0:	d2 01       	movw	r26, r4
 3b2:	11 97       	sbiw	r26, 0x01	; 1
 3b4:	f1 f7       	brne	.-4      	; 0x3b2 <Balance_Read+0x48>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3b6:	31 97       	sbiw	r30, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3b8:	d9 f7       	brne	.-10     	; 0x3b0 <Balance_Read+0x46>

		_delay_ms(1000);

		Balance |= (Data << (Idx*8));
 3ba:	28 2f       	mov	r18, r24
 3bc:	30 e0       	ldi	r19, 0x00	; 0
 3be:	40 e0       	ldi	r20, 0x00	; 0
 3c0:	50 e0       	ldi	r21, 0x00	; 0
 3c2:	60 e0       	ldi	r22, 0x00	; 0
 3c4:	70 e0       	ldi	r23, 0x00	; 0
 3c6:	80 e0       	ldi	r24, 0x00	; 0
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	0e 2d       	mov	r16, r14
 3cc:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
 3d0:	12 2b       	or	r17, r18
 3d2:	d3 2a       	or	r13, r19
 3d4:	c4 2a       	or	r12, r20
 3d6:	b5 2a       	or	r11, r21
 3d8:	a6 2a       	or	r10, r22
 3da:	97 2a       	or	r9, r23
 3dc:	88 2a       	or	r8, r24
 3de:	79 2a       	or	r7, r25
 3e0:	88 e0       	ldi	r24, 0x08	; 8
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	e8 0e       	add	r14, r24
 3e6:	f9 1e       	adc	r15, r25

	UINT16_t Curr_Address = BALANCE_BASE_ADDRESS;

	UINT64_t Balance = 0;

	for (Idx = 0; Idx < BALANCE_NO_OF_BYTES; ++Idx) {
 3e8:	c1 36       	cpi	r28, 0x61	; 97
 3ea:	d1 05       	cpc	r29, r1
 3ec:	11 f0       	breq	.+4      	; 0x3f2 <Balance_Read+0x88>

		_delay_ms(1000);

		Balance |= (Data << (Idx*8));

		++Curr_Address;
 3ee:	21 96       	adiw	r28, 0x01	; 1
 3f0:	da cf       	rjmp	.-76     	; 0x3a6 <Balance_Read+0x3c>

	}

	return Balance;

}
 3f2:	21 2f       	mov	r18, r17
 3f4:	3d 2d       	mov	r19, r13
 3f6:	4c 2d       	mov	r20, r12
 3f8:	5b 2d       	mov	r21, r11
 3fa:	6a 2d       	mov	r22, r10
 3fc:	79 2d       	mov	r23, r9
 3fe:	88 2d       	mov	r24, r8
 400:	97 2d       	mov	r25, r7
 402:	df 91       	pop	r29
 404:	cf 91       	pop	r28
 406:	1f 91       	pop	r17
 408:	0f 91       	pop	r16
 40a:	ff 90       	pop	r15
 40c:	ef 90       	pop	r14
 40e:	df 90       	pop	r13
 410:	cf 90       	pop	r12
 412:	bf 90       	pop	r11
 414:	af 90       	pop	r10
 416:	9f 90       	pop	r9
 418:	8f 90       	pop	r8
 41a:	7f 90       	pop	r7
 41c:	5f 90       	pop	r5
 41e:	4f 90       	pop	r4
 420:	08 95       	ret

00000422 <DIO_WRITE_PIN_VALUE>:
			break;
		}
	}
}
/****************************************************************************/
void DIO_WRITE_PIN_VALUE(const DIO_PIN_ID_t PIN_ID, const DIO_PIN_STATE_t PIN_STATE){
 422:	38 2f       	mov	r19, r24
	volatile UINT8_t* const Reg[DIO_MAX_PORTS] = { PORTA_ADD, PORTB_ADD, PORTC_ADD, PORTD_ADD };
	DIO_PORT_ID_t Port_Id = PIN_ID / 8;
 424:	e8 2f       	mov	r30, r24
 426:	e6 95       	lsr	r30
 428:	e6 95       	lsr	r30
 42a:	e6 95       	lsr	r30
	switch (PIN_STATE) {
 42c:	66 23       	and	r22, r22
 42e:	b1 f0       	breq	.+44     	; 0x45c <DIO_WRITE_PIN_VALUE+0x3a>
 430:	61 30       	cpi	r22, 0x01	; 1
 432:	41 f5       	brne	.+80     	; 0x484 <DIO_WRITE_PIN_VALUE+0x62>
	case DIO_PIN_STATE_HIGH:
		SET_BIT(*Reg[Port_Id], PIN_ID % 8);
 434:	f0 e0       	ldi	r31, 0x00	; 0
 436:	ee 0f       	add	r30, r30
 438:	ff 1f       	adc	r31, r31
 43a:	e8 56       	subi	r30, 0x68	; 104
 43c:	ff 4f       	sbci	r31, 0xFF	; 255
 43e:	01 90       	ld	r0, Z+
 440:	f0 81       	ld	r31, Z
 442:	e0 2d       	mov	r30, r0
 444:	20 81       	ld	r18, Z
 446:	37 70       	andi	r19, 0x07	; 7
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	02 c0       	rjmp	.+4      	; 0x452 <DIO_WRITE_PIN_VALUE+0x30>
 44e:	88 0f       	add	r24, r24
 450:	99 1f       	adc	r25, r25
 452:	3a 95       	dec	r19
 454:	e2 f7       	brpl	.-8      	; 0x44e <DIO_WRITE_PIN_VALUE+0x2c>
 456:	28 2b       	or	r18, r24
 458:	20 83       	st	Z, r18
 45a:	08 95       	ret
		break;
	case DIO_PIN_STATE_LOW:
		CLEAR_BIT(*Reg[Port_Id], PIN_ID % 8);
 45c:	f0 e0       	ldi	r31, 0x00	; 0
 45e:	ee 0f       	add	r30, r30
 460:	ff 1f       	adc	r31, r31
 462:	e8 56       	subi	r30, 0x68	; 104
 464:	ff 4f       	sbci	r31, 0xFF	; 255
 466:	01 90       	ld	r0, Z+
 468:	f0 81       	ld	r31, Z
 46a:	e0 2d       	mov	r30, r0
 46c:	20 81       	ld	r18, Z
 46e:	37 70       	andi	r19, 0x07	; 7
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	02 c0       	rjmp	.+4      	; 0x47a <DIO_WRITE_PIN_VALUE+0x58>
 476:	88 0f       	add	r24, r24
 478:	99 1f       	adc	r25, r25
 47a:	3a 95       	dec	r19
 47c:	e2 f7       	brpl	.-8      	; 0x476 <DIO_WRITE_PIN_VALUE+0x54>
 47e:	80 95       	com	r24
 480:	82 23       	and	r24, r18
 482:	80 83       	st	Z, r24
 484:	08 95       	ret

00000486 <DIO_INIT>:
#include "DIO_CFG.h"
#include "DIO.h"
/****************************************************************************/

void DIO_INIT(void)
{
 486:	ef 92       	push	r14
 488:	ff 92       	push	r15
 48a:	1f 93       	push	r17
 48c:	cf 93       	push	r28
 48e:	df 93       	push	r29
 490:	10 e0       	ldi	r17, 0x00	; 0
 492:	c0 e0       	ldi	r28, 0x00	; 0
 494:	d0 e0       	ldi	r29, 0x00	; 0
	volatile UINT8_t* const Reg[DIO_MAX_PORTS] = { DDRA_ADD, DDRB_ADD, DDRC_ADD, DDRD_ADD };
	for (Pin_Id = DIO_PINA0; Pin_Id < DIO_MAX_PINS; Pin_Id++) {
		Port_Id = Pin_Id / 8;
		switch (Pin_Direction[Pin_Id]) {
		case DIO_PIN_DIRECTION_OUTPUT:
			SET_BIT(*Reg[Port_Id], Pin_Id % 8);
 496:	51 e0       	ldi	r21, 0x01	; 1
 498:	e5 2e       	mov	r14, r21
 49a:	f1 2c       	mov	r15, r1
{
	DIO_PIN_ID_t Pin_Id;
	DIO_PORT_ID_t Port_Id;
	volatile UINT8_t* const Reg[DIO_MAX_PORTS] = { DDRA_ADD, DDRB_ADD, DDRC_ADD, DDRD_ADD };
	for (Pin_Id = DIO_PINA0; Pin_Id < DIO_MAX_PINS; Pin_Id++) {
		Port_Id = Pin_Id / 8;
 49c:	21 2f       	mov	r18, r17
 49e:	26 95       	lsr	r18
 4a0:	26 95       	lsr	r18
 4a2:	26 95       	lsr	r18
		switch (Pin_Direction[Pin_Id]) {
 4a4:	81 2f       	mov	r24, r17
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	fc 01       	movw	r30, r24
 4aa:	e0 5a       	subi	r30, 0xA0	; 160
 4ac:	ff 4f       	sbci	r31, 0xFF	; 255
 4ae:	e0 81       	ld	r30, Z
 4b0:	e1 30       	cpi	r30, 0x01	; 1
 4b2:	31 f0       	breq	.+12     	; 0x4c0 <DIO_INIT+0x3a>
 4b4:	e1 30       	cpi	r30, 0x01	; 1
 4b6:	c8 f0       	brcs	.+50     	; 0x4ea <DIO_INIT+0x64>
 4b8:	e2 30       	cpi	r30, 0x02	; 2
 4ba:	09 f0       	breq	.+2      	; 0x4be <DIO_INIT+0x38>
 4bc:	49 c0       	rjmp	.+146    	; 0x550 <DIO_INIT+0xca>
 4be:	2e c0       	rjmp	.+92     	; 0x51c <DIO_INIT+0x96>
		case DIO_PIN_DIRECTION_OUTPUT:
			SET_BIT(*Reg[Port_Id], Pin_Id % 8);
 4c0:	e2 2f       	mov	r30, r18
 4c2:	f0 e0       	ldi	r31, 0x00	; 0
 4c4:	ee 0f       	add	r30, r30
 4c6:	ff 1f       	adc	r31, r31
 4c8:	e0 56       	subi	r30, 0x60	; 96
 4ca:	ff 4f       	sbci	r31, 0xFF	; 255
 4cc:	01 90       	ld	r0, Z+
 4ce:	f0 81       	ld	r31, Z
 4d0:	e0 2d       	mov	r30, r0
 4d2:	20 81       	ld	r18, Z
 4d4:	87 70       	andi	r24, 0x07	; 7
 4d6:	90 70       	andi	r25, 0x00	; 0
 4d8:	a7 01       	movw	r20, r14
 4da:	02 c0       	rjmp	.+4      	; 0x4e0 <DIO_INIT+0x5a>
 4dc:	44 0f       	add	r20, r20
 4de:	55 1f       	adc	r21, r21
 4e0:	8a 95       	dec	r24
 4e2:	e2 f7       	brpl	.-8      	; 0x4dc <DIO_INIT+0x56>
 4e4:	24 2b       	or	r18, r20
 4e6:	20 83       	st	Z, r18
 4e8:	33 c0       	rjmp	.+102    	; 0x550 <DIO_INIT+0xca>
			break;
		case DIO_PIN_DIRECTION_INPUT_PULL_UP:
			CLEAR_BIT(*Reg[Port_Id], Pin_Id % 8);
 4ea:	e2 2f       	mov	r30, r18
 4ec:	f0 e0       	ldi	r31, 0x00	; 0
 4ee:	ee 0f       	add	r30, r30
 4f0:	ff 1f       	adc	r31, r31
 4f2:	e0 56       	subi	r30, 0x60	; 96
 4f4:	ff 4f       	sbci	r31, 0xFF	; 255
 4f6:	01 90       	ld	r0, Z+
 4f8:	f0 81       	ld	r31, Z
 4fa:	e0 2d       	mov	r30, r0
 4fc:	20 81       	ld	r18, Z
 4fe:	87 70       	andi	r24, 0x07	; 7
 500:	90 70       	andi	r25, 0x00	; 0
 502:	a7 01       	movw	r20, r14
 504:	02 c0       	rjmp	.+4      	; 0x50a <DIO_INIT+0x84>
 506:	44 0f       	add	r20, r20
 508:	55 1f       	adc	r21, r21
 50a:	8a 95       	dec	r24
 50c:	e2 f7       	brpl	.-8      	; 0x506 <DIO_INIT+0x80>
 50e:	ca 01       	movw	r24, r20
 510:	80 95       	com	r24
 512:	82 23       	and	r24, r18
 514:	80 83       	st	Z, r24
			DIO_WRITE_PIN_VALUE(Pin_Id, DIO_PIN_STATE_HIGH);
 516:	81 2f       	mov	r24, r17
 518:	61 e0       	ldi	r22, 0x01	; 1
 51a:	18 c0       	rjmp	.+48     	; 0x54c <DIO_INIT+0xc6>
			break;
		case DIO_PIN_DIRECTION_INPUT_FLOAT:
			CLEAR_BIT(*Reg[Port_Id], Pin_Id % 8);
 51c:	e2 2f       	mov	r30, r18
 51e:	f0 e0       	ldi	r31, 0x00	; 0
 520:	ee 0f       	add	r30, r30
 522:	ff 1f       	adc	r31, r31
 524:	e0 56       	subi	r30, 0x60	; 96
 526:	ff 4f       	sbci	r31, 0xFF	; 255
 528:	01 90       	ld	r0, Z+
 52a:	f0 81       	ld	r31, Z
 52c:	e0 2d       	mov	r30, r0
 52e:	20 81       	ld	r18, Z
 530:	87 70       	andi	r24, 0x07	; 7
 532:	90 70       	andi	r25, 0x00	; 0
 534:	a7 01       	movw	r20, r14
 536:	02 c0       	rjmp	.+4      	; 0x53c <DIO_INIT+0xb6>
 538:	44 0f       	add	r20, r20
 53a:	55 1f       	adc	r21, r21
 53c:	8a 95       	dec	r24
 53e:	e2 f7       	brpl	.-8      	; 0x538 <DIO_INIT+0xb2>
 540:	ca 01       	movw	r24, r20
 542:	80 95       	com	r24
 544:	82 23       	and	r24, r18
 546:	80 83       	st	Z, r24
			DIO_WRITE_PIN_VALUE(Pin_Id, DIO_PIN_STATE_LOW);
 548:	81 2f       	mov	r24, r17
 54a:	60 e0       	ldi	r22, 0x00	; 0
 54c:	0e 94 11 02 	call	0x422	; 0x422 <DIO_WRITE_PIN_VALUE>
void DIO_INIT(void)
{
	DIO_PIN_ID_t Pin_Id;
	DIO_PORT_ID_t Port_Id;
	volatile UINT8_t* const Reg[DIO_MAX_PORTS] = { DDRA_ADD, DDRB_ADD, DDRC_ADD, DDRD_ADD };
	for (Pin_Id = DIO_PINA0; Pin_Id < DIO_MAX_PINS; Pin_Id++) {
 550:	1f 5f       	subi	r17, 0xFF	; 255
 552:	21 96       	adiw	r28, 0x01	; 1
 554:	c0 32       	cpi	r28, 0x20	; 32
 556:	d1 05       	cpc	r29, r1
 558:	09 f0       	breq	.+2      	; 0x55c <DIO_INIT+0xd6>
 55a:	a0 cf       	rjmp	.-192    	; 0x49c <DIO_INIT+0x16>
		break;
		default:
			break;
		}
	}
}
 55c:	df 91       	pop	r29
 55e:	cf 91       	pop	r28
 560:	1f 91       	pop	r17
 562:	ff 90       	pop	r15
 564:	ef 90       	pop	r14
 566:	08 95       	ret

00000568 <DIO_READ_PIN_VALUE>:
	default:
		break;
	}
}
/****************************************************************************/
DIO_PIN_STATE_t DIO_READ_PIN_VALUE(const DIO_PIN_ID_t PIN_ID){
 568:	28 2f       	mov	r18, r24
	volatile UINT8_t* const Reg[DIO_MAX_PORTS] = { PINA_ADD, PINB_ADD, PINC_ADD, PIND_ADD };
	DIO_PORT_ID_t Port_Id = PIN_ID / 8;
	DIO_PIN_STATE_t State = DIO_PIN_STATE_LOW;
	if(DIO_PIN_STATE_HIGH == GET_BIT(*Reg[Port_Id], PIN_ID % 8)){
 56a:	e8 2f       	mov	r30, r24
 56c:	e6 95       	lsr	r30
 56e:	e6 95       	lsr	r30
 570:	e6 95       	lsr	r30
 572:	f0 e0       	ldi	r31, 0x00	; 0
 574:	ee 0f       	add	r30, r30
 576:	ff 1f       	adc	r31, r31
 578:	e0 57       	subi	r30, 0x70	; 112
 57a:	ff 4f       	sbci	r31, 0xFF	; 255
 57c:	01 90       	ld	r0, Z+
 57e:	f0 81       	ld	r31, Z
 580:	e0 2d       	mov	r30, r0
 582:	80 81       	ld	r24, Z
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	27 70       	andi	r18, 0x07	; 7
 588:	02 c0       	rjmp	.+4      	; 0x58e <DIO_READ_PIN_VALUE+0x26>
 58a:	95 95       	asr	r25
 58c:	87 95       	ror	r24
 58e:	2a 95       	dec	r18
 590:	e2 f7       	brpl	.-8      	; 0x58a <DIO_READ_PIN_VALUE+0x22>
		State = DIO_PIN_STATE_HIGH;
	}
	return State;
}
 592:	81 70       	andi	r24, 0x01	; 1
 594:	08 95       	ret

00000596 <DIO_WRITE_PORT>:
/****************************************************************************/
void DIO_WRITE_PORT(const DIO_PORT_ID_t PORT_ID, const UINT8_t VALUE){
	volatile UINT8_t* const Reg[DIO_MAX_PORTS] = { PORTA_ADD, PORTB_ADD, PORTC_ADD, PORTD_ADD };
	*Reg[PORT_ID] = VALUE;
 596:	e8 2f       	mov	r30, r24
 598:	f0 e0       	ldi	r31, 0x00	; 0
 59a:	ee 0f       	add	r30, r30
 59c:	ff 1f       	adc	r31, r31
 59e:	e8 57       	subi	r30, 0x78	; 120
 5a0:	ff 4f       	sbci	r31, 0xFF	; 255
 5a2:	01 90       	ld	r0, Z+
 5a4:	f0 81       	ld	r31, Z
 5a6:	e0 2d       	mov	r30, r0
 5a8:	60 83       	st	Z, r22
}
 5aa:	08 95       	ret

000005ac <DIO_Read_PORT>:
/****************************************************************************/
UINT8_t DIO_Read_PORT(const DIO_PORT_ID_t PORT_ID){
	volatile UINT8_t* const Reg[DIO_MAX_PORTS] = { PINA_ADD, PINB_ADD, PINC_ADD, PIND_ADD };
	return *Reg[PORT_ID];
 5ac:	e8 2f       	mov	r30, r24
 5ae:	f0 e0       	ldi	r31, 0x00	; 0
 5b0:	ee 0f       	add	r30, r30
 5b2:	ff 1f       	adc	r31, r31
 5b4:	e0 58       	subi	r30, 0x80	; 128
 5b6:	ff 4f       	sbci	r31, 0xFF	; 255
 5b8:	01 90       	ld	r0, Z+
 5ba:	f0 81       	ld	r31, Z
 5bc:	e0 2d       	mov	r30, r0
 5be:	80 81       	ld	r24, Z
}
 5c0:	08 95       	ret

000005c2 <FLASH_Data_Write>:
#include "FLASH_DATA.h"
void
FLASH_Data_Write(UINT16_t Address, UINT8_t Data)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEMWE))
 5c2:	e2 99       	sbic	0x1c, 2	; 28
 5c4:	fe cf       	rjmp	.-4      	; 0x5c2 <FLASH_Data_Write>
	;
	/* Set up address and data registers */
	EEAR = Address;
 5c6:	9f bb       	out	0x1f, r25	; 31
 5c8:	8e bb       	out	0x1e, r24	; 30
	EEDR = Data;
 5ca:	6d bb       	out	0x1d, r22	; 29
	/* Write logical one to EEMWE */
	EECR |= (1<<EEMWE);
 5cc:	e2 9a       	sbi	0x1c, 2	; 28
	/* Start eeprom write by setting EEWE */
	EECR |= (1<<EEWE);
 5ce:	e1 9a       	sbi	0x1c, 1	; 28
}
 5d0:	08 95       	ret

000005d2 <FLASH_Data_Read>:
UINT8_t
FLASH_Data_Read(UINT16_t Address)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEMWE))
 5d2:	e2 99       	sbic	0x1c, 2	; 28
 5d4:	fe cf       	rjmp	.-4      	; 0x5d2 <FLASH_Data_Read>
	;
	/* Set up address register */
	EEAR = Address;
 5d6:	9f bb       	out	0x1f, r25	; 31
 5d8:	8e bb       	out	0x1e, r24	; 30
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
 5da:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	return EEDR;
 5dc:	8d b3       	in	r24, 0x1d	; 29
}
 5de:	08 95       	ret

000005e0 <REQ_Init>:
REQ_Update(UINT8_t Request);

void
REQ_Init(void){

	UART_ISR_PTR=REQ_Handler;
 5e0:	82 e0       	ldi	r24, 0x02	; 2
 5e2:	93 e0       	ldi	r25, 0x03	; 3
 5e4:	90 93 a9 00 	sts	0x00A9, r25
 5e8:	80 93 a8 00 	sts	0x00A8, r24
}
 5ec:	08 95       	ret

000005ee <REQ_Update>:
}

static void
REQ_Update(UDS_t Request){

	GIC;
 5ee:	9f b7       	in	r25, 0x3f	; 63
 5f0:	9f 77       	andi	r25, 0x7F	; 127
 5f2:	9f bf       	out	0x3f, r25	; 63

	UDS_Write_Request(Request);
 5f4:	0e 94 32 03 	call	0x664	; 0x664 <UDS_Write_Request>

	WDT_Priode(WDT_16_MS);
 5f8:	80 e0       	ldi	r24, 0x00	; 0
 5fa:	0e 94 ae 03 	call	0x75c	; 0x75c <WDT_Priode>

	WDT_Enable();
 5fe:	0e 94 aa 03 	call	0x754	; 0x754 <WDT_Enable>
 602:	ff cf       	rjmp	.-2      	; 0x602 <REQ_Update+0x14>

00000604 <REQ_Handler>:
void
REQ_Handler(void){

	UINT8_t Curr_Req;

	Curr_Req=URT_Rx_Byte();
 604:	0e 94 66 03 	call	0x6cc	; 0x6cc <URT_Rx_Byte>

	switch(Curr_Req){
 608:	80 33       	cpi	r24, 0x30	; 48
 60a:	29 f0       	breq	.+10     	; 0x616 <REQ_Handler+0x12>
 60c:	80 3b       	cpi	r24, 0xB0	; 176
 60e:	49 f0       	breq	.+18     	; 0x622 <REQ_Handler+0x1e>
 610:	89 30       	cpi	r24, 0x09	; 9
 612:	51 f4       	brne	.+20     	; 0x628 <REQ_Handler+0x24>
 614:	02 c0       	rjmp	.+4      	; 0x61a <REQ_Handler+0x16>

	case UDS_REQ_DATA_TRANSFER:

		REQ_Update(UDS_REQ_DATA_TRANSFER);
 616:	80 e3       	ldi	r24, 0x30	; 48
 618:	01 c0       	rjmp	.+2      	; 0x61c <REQ_Handler+0x18>

		break;

	case UDS_CFG_FEES:

		REQ_Update(UDS_CFG_FEES);
 61a:	89 e0       	ldi	r24, 0x09	; 9
 61c:	0e 94 f7 02 	call	0x5ee	; 0x5ee <REQ_Update>
 620:	08 95       	ret

		break;

	case UDS_CFG_BALANCE:

		REQ_Update(UDS_CFG_BALANCE);
 622:	80 eb       	ldi	r24, 0xB0	; 176
 624:	0e 94 f7 02 	call	0x5ee	; 0x5ee <REQ_Update>
 628:	08 95       	ret

0000062a <UDS_Read_Request>:

	UDS_t Request = UDS_NO_REQ;

	UINT8_t Reading;

	Reading = FLASH_Data_Read(UDS_REQ_ADDRESS);
 62a:	81 e0       	ldi	r24, 0x01	; 1
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <FLASH_Data_Read>
 632:	20 e1       	ldi	r18, 0x10	; 16
 634:	37 e2       	ldi	r19, 0x27	; 39
 636:	48 ec       	ldi	r20, 0xC8	; 200
 638:	50 e0       	ldi	r21, 0x00	; 0
 63a:	fa 01       	movw	r30, r20
 63c:	31 97       	sbiw	r30, 0x01	; 1
 63e:	f1 f7       	brne	.-4      	; 0x63c <UDS_Read_Request+0x12>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 640:	21 50       	subi	r18, 0x01	; 1
 642:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 644:	d1 f7       	brne	.-12     	; 0x63a <UDS_Read_Request+0x10>

	_delay_ms(1000);

	switch (Reading) {
 646:	80 33       	cpi	r24, 0x30	; 48
 648:	29 f0       	breq	.+10     	; 0x654 <UDS_Read_Request+0x2a>
 64a:	80 3b       	cpi	r24, 0xB0	; 176
 64c:	49 f0       	breq	.+18     	; 0x660 <UDS_Read_Request+0x36>
 64e:	89 30       	cpi	r24, 0x09	; 9
 650:	19 f4       	brne	.+6      	; 0x658 <UDS_Read_Request+0x2e>
 652:	04 c0       	rjmp	.+8      	; 0x65c <UDS_Read_Request+0x32>
 654:	80 e3       	ldi	r24, 0x30	; 48
 656:	08 95       	ret
 658:	88 ef       	ldi	r24, 0xF8	; 248
 65a:	08 95       	ret
 65c:	89 e0       	ldi	r24, 0x09	; 9
 65e:	08 95       	ret

	case UDS_CFG_FEES:

		Request = UDS_CFG_FEES;

		break;
 660:	80 eb       	ldi	r24, 0xB0	; 176
	default:

		break;
	}
	return Request;
}
 662:	08 95       	ret

00000664 <UDS_Write_Request>:
#define UDS_REQ_ADDRESS 0x01

void
UDS_Write_Request(UDS_t Request){

	switch(Request){
 664:	80 33       	cpi	r24, 0x30	; 48
 666:	69 f0       	breq	.+26     	; 0x682 <UDS_Write_Request+0x1e>
 668:	81 33       	cpi	r24, 0x31	; 49
 66a:	18 f4       	brcc	.+6      	; 0x672 <UDS_Write_Request+0xe>
 66c:	89 30       	cpi	r24, 0x09	; 9
 66e:	b1 f4       	brne	.+44     	; 0x69c <UDS_Write_Request+0x38>
 670:	0c c0       	rjmp	.+24     	; 0x68a <UDS_Write_Request+0x26>
 672:	80 3b       	cpi	r24, 0xB0	; 176
 674:	71 f0       	breq	.+28     	; 0x692 <UDS_Write_Request+0x2e>
 676:	88 3f       	cpi	r24, 0xF8	; 248
 678:	89 f4       	brne	.+34     	; 0x69c <UDS_Write_Request+0x38>

	case UDS_NO_REQ:

		FLASH_Data_Write(UDS_REQ_ADDRESS, UDS_NO_REQ);
 67a:	81 e0       	ldi	r24, 0x01	; 1
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	68 ef       	ldi	r22, 0xF8	; 248
 680:	0b c0       	rjmp	.+22     	; 0x698 <UDS_Write_Request+0x34>

		break;

	case UDS_REQ_DATA_TRANSFER:

		FLASH_Data_Write(UDS_REQ_ADDRESS, UDS_REQ_DATA_TRANSFER);
 682:	81 e0       	ldi	r24, 0x01	; 1
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	60 e3       	ldi	r22, 0x30	; 48
 688:	07 c0       	rjmp	.+14     	; 0x698 <UDS_Write_Request+0x34>

		break;

	case UDS_CFG_FEES:

		FLASH_Data_Write(UDS_REQ_ADDRESS, UDS_CFG_FEES);
 68a:	81 e0       	ldi	r24, 0x01	; 1
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	69 e0       	ldi	r22, 0x09	; 9
 690:	03 c0       	rjmp	.+6      	; 0x698 <UDS_Write_Request+0x34>

		break;

	case UDS_CFG_BALANCE:

		FLASH_Data_Write(UDS_REQ_ADDRESS, UDS_CFG_BALANCE);
 692:	81 e0       	ldi	r24, 0x01	; 1
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	60 eb       	ldi	r22, 0xB0	; 176
 698:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <FLASH_Data_Write>
 69c:	80 e1       	ldi	r24, 0x10	; 16
 69e:	97 e2       	ldi	r25, 0x27	; 39
 6a0:	28 ec       	ldi	r18, 0xC8	; 200
 6a2:	30 e0       	ldi	r19, 0x00	; 0
 6a4:	f9 01       	movw	r30, r18
 6a6:	31 97       	sbiw	r30, 0x01	; 1
 6a8:	f1 f7       	brne	.-4      	; 0x6a6 <UDS_Write_Request+0x42>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 6aa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 6ac:	d9 f7       	brne	.-10     	; 0x6a4 <UDS_Write_Request+0x40>

	}

	_delay_ms(1000);

}
 6ae:	08 95       	ret

000006b0 <URT_Init>:
}
/****************************************************************************/
void
URT_Init(void)
{
	SET_BIT(UCSRC, 1);
 6b0:	80 b5       	in	r24, 0x20	; 32
 6b2:	82 60       	ori	r24, 0x02	; 2
 6b4:	80 bd       	out	0x20, r24	; 32
	SET_BIT(UCSRC, 2);
 6b6:	80 b5       	in	r24, 0x20	; 32
 6b8:	84 60       	ori	r24, 0x04	; 4
 6ba:	80 bd       	out	0x20, r24	; 32
	UBRRH = URT_BAUD_RATE >> 8;
 6bc:	10 bc       	out	0x20, r1	; 32
	UBRRL = URT_BAUD_RATE;
 6be:	83 e3       	ldi	r24, 0x33	; 51
 6c0:	89 b9       	out	0x09, r24	; 9
static void
URT_Tx_INT(const URT_INT_t INT)
{
	switch (INT) {
	case URT_IE:
		SET_BIT(UCSRB, 6);
 6c2:	56 9a       	sbi	0x0a, 6	; 10
static void
URT_Tx(const URT_MODE_t MODE)
{
	switch (MODE) {
	case URT_ENABLE:
		SET_BIT(UCSRB, 3);
 6c4:	53 9a       	sbi	0x0a, 3	; 10
static void
URT_Rx_INT(const URT_INT_t INT)
{
	switch (INT) {
	case URT_IE:
		SET_BIT(UCSRB, 7);
 6c6:	57 9a       	sbi	0x0a, 7	; 10
static void
URT_Rx(const URT_MODE_t MODE)
{
	switch (MODE) {
	case URT_ENABLE:
		SET_BIT(UCSRB, 4);
 6c8:	54 9a       	sbi	0x0a, 4	; 10

	/*- init URT RX -*/
		URT_Rx_INT(URT_IE);
		URT_Rx(URT_ENABLE);

}
 6ca:	08 95       	ret

000006cc <URT_Rx_Byte>:
/****************************************************************************/
UINT8_t
URT_Rx_Byte(void)
{
	return UDR;
 6cc:	8c b1       	in	r24, 0x0c	; 12
}
 6ce:	08 95       	ret

000006d0 <Str_Cmp>:
BOOL_t
Str_Cmp(const UINT8_t* Str1, const UINT8_t* Str2)
{
 6d0:	dc 01       	movw	r26, r24
 6d2:	fb 01       	movw	r30, r22
 6d4:	06 c0       	rjmp	.+12     	; 0x6e2 <Str_Cmp+0x12>
	BOOL_t IsSame = FALSE;
	while(*Str1 == *Str2){
		if(*Str1 == '\0'){
 6d6:	99 23       	and	r25, r25
 6d8:	11 f4       	brne	.+4      	; 0x6de <Str_Cmp+0xe>
 6da:	81 e0       	ldi	r24, 0x01	; 1
 6dc:	08 95       	ret
			IsSame = TRUE;
			break;
		}
		++Str1;
 6de:	11 96       	adiw	r26, 0x01	; 1
		++Str2;
 6e0:	31 96       	adiw	r30, 0x01	; 1
}
BOOL_t
Str_Cmp(const UINT8_t* Str1, const UINT8_t* Str2)
{
	BOOL_t IsSame = FALSE;
	while(*Str1 == *Str2){
 6e2:	9c 91       	ld	r25, X
 6e4:	80 81       	ld	r24, Z
 6e6:	98 17       	cp	r25, r24
 6e8:	b1 f3       	breq	.-20     	; 0x6d6 <Str_Cmp+0x6>
 6ea:	80 e0       	ldi	r24, 0x00	; 0
		}
		++Str1;
		++Str2;
	}
	return IsSame;
}
 6ec:	08 95       	ret

000006ee <__vector_13>:
/****************************************************************************/
ISR(URT_RX_OVF_VECT)
{
 6ee:	1f 92       	push	r1
 6f0:	0f 92       	push	r0
 6f2:	0f b6       	in	r0, 0x3f	; 63
 6f4:	0f 92       	push	r0
 6f6:	11 24       	eor	r1, r1
 6f8:	2f 93       	push	r18
 6fa:	3f 93       	push	r19
 6fc:	4f 93       	push	r20
 6fe:	5f 93       	push	r21
 700:	6f 93       	push	r22
 702:	7f 93       	push	r23
 704:	8f 93       	push	r24
 706:	9f 93       	push	r25
 708:	af 93       	push	r26
 70a:	bf 93       	push	r27
 70c:	ef 93       	push	r30
 70e:	ff 93       	push	r31
	if(UART_ISR_PTR!=NULL_PTR)
 710:	e0 91 a8 00 	lds	r30, 0x00A8
 714:	f0 91 a9 00 	lds	r31, 0x00A9
 718:	30 97       	sbiw	r30, 0x00	; 0
 71a:	09 f0       	breq	.+2      	; 0x71e <__vector_13+0x30>
	{
		UART_ISR_PTR();
 71c:	09 95       	icall
	}
}
 71e:	ff 91       	pop	r31
 720:	ef 91       	pop	r30
 722:	bf 91       	pop	r27
 724:	af 91       	pop	r26
 726:	9f 91       	pop	r25
 728:	8f 91       	pop	r24
 72a:	7f 91       	pop	r23
 72c:	6f 91       	pop	r22
 72e:	5f 91       	pop	r21
 730:	4f 91       	pop	r20
 732:	3f 91       	pop	r19
 734:	2f 91       	pop	r18
 736:	0f 90       	pop	r0
 738:	0f be       	out	0x3f, r0	; 63
 73a:	0f 90       	pop	r0
 73c:	1f 90       	pop	r1
 73e:	18 95       	reti

00000740 <__vector_15>:
/****************************************************************************/
ISR(URT_TX_OVF_VECT)
{
 740:	1f 92       	push	r1
 742:	0f 92       	push	r0
 744:	0f b6       	in	r0, 0x3f	; 63
 746:	0f 92       	push	r0
 748:	11 24       	eor	r1, r1

}
 74a:	0f 90       	pop	r0
 74c:	0f be       	out	0x3f, r0	; 63
 74e:	0f 90       	pop	r0
 750:	1f 90       	pop	r1
 752:	18 95       	reti

00000754 <WDT_Enable>:
#include "STD_MEMORY_MAP.h"
#include "STD_BITS.h"
#include "WDT.h"

void WDT_Enable(void){
	SET_BIT(WDTCR, 3);
 754:	81 b5       	in	r24, 0x21	; 33
 756:	88 60       	ori	r24, 0x08	; 8
 758:	81 bd       	out	0x21, r24	; 33
}
 75a:	08 95       	ret

0000075c <WDT_Priode>:
void WDT_Priode(const WDT_PERIODE_t PERIODE){
	WDTCR &= 0XF8;
 75c:	91 b5       	in	r25, 0x21	; 33
 75e:	98 7f       	andi	r25, 0xF8	; 248
 760:	91 bd       	out	0x21, r25	; 33
	WDTCR |= PERIODE;
 762:	91 b5       	in	r25, 0x21	; 33
 764:	98 2b       	or	r25, r24
 766:	91 bd       	out	0x21, r25	; 33
}
 768:	08 95       	ret

0000076a <WDT_Refresh>:
void WDT_Refresh(void){
	asm volatile("wdr");
 76a:	a8 95       	wdr
}
 76c:	08 95       	ret

0000076e <WDT_Disable>:
void WDT_Disable(void){
	SET_BIT(WDTCR, 3);
 76e:	81 b5       	in	r24, 0x21	; 33
 770:	88 60       	ori	r24, 0x08	; 8
 772:	81 bd       	out	0x21, r24	; 33
	SET_BIT(WDTCR, 4);
 774:	81 b5       	in	r24, 0x21	; 33
 776:	80 61       	ori	r24, 0x10	; 16
 778:	81 bd       	out	0x21, r24	; 33
	CLEAR_BIT(WDTCR, 3);
 77a:	81 b5       	in	r24, 0x21	; 33
 77c:	87 7f       	andi	r24, 0xF7	; 247
 77e:	81 bd       	out	0x21, r24	; 33
}
 780:	08 95       	ret

00000782 <WDT_Qinit>:

void WDT_Enable(void){
	SET_BIT(WDTCR, 3);
}
void WDT_Priode(const WDT_PERIODE_t PERIODE){
	WDTCR &= 0XF8;
 782:	81 b5       	in	r24, 0x21	; 33
 784:	88 7f       	andi	r24, 0xF8	; 248
 786:	81 bd       	out	0x21, r24	; 33
	WDTCR |= PERIODE;
 788:	81 b5       	in	r24, 0x21	; 33
 78a:	86 60       	ori	r24, 0x06	; 6
 78c:	81 bd       	out	0x21, r24	; 33
#include "STD_MEMORY_MAP.h"
#include "STD_BITS.h"
#include "WDT.h"

void WDT_Enable(void){
	SET_BIT(WDTCR, 3);
 78e:	81 b5       	in	r24, 0x21	; 33
 790:	88 60       	ori	r24, 0x08	; 8
 792:	81 bd       	out	0x21, r24	; 33
}
void WDT_Qinit(void)
{
	WDT_Priode(WDT_1000_MS);
	WDT_Enable();
}
 794:	08 95       	ret

00000796 <main>:
#include "util/delay.h"
#include "REQ.h"


int
main(void){
 796:	1f 93       	push	r17
 798:	cf 93       	push	r28
 79a:	df 93       	push	r29

	GIE;
 79c:	8f b7       	in	r24, 0x3f	; 63
 79e:	80 68       	ori	r24, 0x80	; 128
 7a0:	8f bf       	out	0x3f, r24	; 63
	DIO_INIT();
 7a2:	0e 94 43 02 	call	0x486	; 0x486 <DIO_INIT>
	URT_Init();
 7a6:	0e 94 58 03 	call	0x6b0	; 0x6b0 <URT_Init>
	REQ_Init();
 7aa:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <REQ_Init>
	DIO_WRITE_PIN_VALUE(DIO_PINC1, DIO_PIN_STATE_LOW);
 7ae:	81 e1       	ldi	r24, 0x11	; 17
 7b0:	60 e0       	ldi	r22, 0x00	; 0
 7b2:	0e 94 11 02 	call	0x422	; 0x422 <DIO_WRITE_PIN_VALUE>
	DIO_WRITE_PIN_VALUE(DIO_PINC0, DIO_PIN_STATE_LOW);
 7b6:	80 e1       	ldi	r24, 0x10	; 16
 7b8:	60 e0       	ldi	r22, 0x00	; 0
 7ba:	0e 94 11 02 	call	0x422	; 0x422 <DIO_WRITE_PIN_VALUE>
 7be:	80 e3       	ldi	r24, 0x30	; 48
 7c0:	95 e7       	ldi	r25, 0x75	; 117
 7c2:	28 ec       	ldi	r18, 0xC8	; 200
 7c4:	30 e0       	ldi	r19, 0x00	; 0
 7c6:	f9 01       	movw	r30, r18
 7c8:	31 97       	sbiw	r30, 0x01	; 1
 7ca:	f1 f7       	brne	.-4      	; 0x7c8 <main+0x32>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 7cc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 7ce:	d9 f7       	brne	.-10     	; 0x7c6 <main+0x30>
	_delay_ms(3000);

	while(1){

		DIO_WRITE_PIN_VALUE(DIO_PINC1, 1^DIO_READ_PIN_VALUE(DIO_PINC1));
 7d0:	11 e0       	ldi	r17, 0x01	; 1
 7d2:	c8 ec       	ldi	r28, 0xC8	; 200
 7d4:	d0 e0       	ldi	r29, 0x00	; 0
 7d6:	81 e1       	ldi	r24, 0x11	; 17
 7d8:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_READ_PIN_VALUE>
 7dc:	68 2f       	mov	r22, r24
 7de:	61 27       	eor	r22, r17
 7e0:	81 e1       	ldi	r24, 0x11	; 17
 7e2:	0e 94 11 02 	call	0x422	; 0x422 <DIO_WRITE_PIN_VALUE>
 7e6:	84 ef       	ldi	r24, 0xF4	; 244
 7e8:	91 e0       	ldi	r25, 0x01	; 1
 7ea:	fe 01       	movw	r30, r28
 7ec:	31 97       	sbiw	r30, 0x01	; 1
 7ee:	f1 f7       	brne	.-4      	; 0x7ec <main+0x56>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 7f0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 7f2:	d9 f7       	brne	.-10     	; 0x7ea <main+0x54>
		_delay_ms(50);
		DIO_WRITE_PIN_VALUE(DIO_PINC0, 1^DIO_READ_PIN_VALUE(DIO_PINC0));
 7f4:	80 e1       	ldi	r24, 0x10	; 16
 7f6:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_READ_PIN_VALUE>
 7fa:	68 2f       	mov	r22, r24
 7fc:	61 27       	eor	r22, r17
 7fe:	80 e1       	ldi	r24, 0x10	; 16
 800:	0e 94 11 02 	call	0x422	; 0x422 <DIO_WRITE_PIN_VALUE>
 804:	84 ef       	ldi	r24, 0xF4	; 244
 806:	91 e0       	ldi	r25, 0x01	; 1
 808:	fe 01       	movw	r30, r28
 80a:	31 97       	sbiw	r30, 0x01	; 1
 80c:	f1 f7       	brne	.-4      	; 0x80a <main+0x74>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 80e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 810:	d9 f7       	brne	.-10     	; 0x808 <main+0x72>
 812:	e1 cf       	rjmp	.-62     	; 0x7d6 <main+0x40>

00000814 <_exit>:
 814:	f8 94       	cli

00000816 <__stop_program>:
 816:	ff cf       	rjmp	.-2      	; 0x816 <__stop_program>
